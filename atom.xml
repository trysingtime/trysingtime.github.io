<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>yui&#39;s blog</title>
  
  <subtitle>人类的悲欢并不相通</subtitle>
  <link href="https://blog.yuifly.top/atom.xml" rel="self"/>
  
  <link href="https://blog.yuifly.top/"/>
  <updated>2024-02-22T07:16:36.301Z</updated>
  <id>https://blog.yuifly.top/</id>
  
  <author>
    <name>yui</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机网络的繁花</title>
    <link href="https://blog.yuifly.top/2024/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E7%B9%81%E8%8A%B1/"/>
    <id>https://blog.yuifly.top/2024/02/22/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E7%9A%84%E7%B9%81%E8%8A%B1/</id>
    <published>2024-02-22T07:16:36.301Z</published>
    <updated>2024-02-22T07:16:36.301Z</updated>
    
    <content type="html"><![CDATA[<p>MAC 和 IP 地址<br>当下计算机发展火热，每年不计其数的学生投奔这个行业，匆匆忙忙学一门编程语言，急急忙忙找一份工作。平时对于工作内容滚瓜烂熟，但是总感觉自己基础并不牢固，想要夯实基础，却又无从着手。平时碎片时间学到了很多，但知识点总是串不起来。这非常正常，计算机这几十年的迅猛发展，带来了巨量的知识内容，甚至每天都在更新全新的技术。滚滚车轮下，没人可以了解一切，人们只是在不断追逐。万幸的是，计算机并不同于自然科学，自然科学通常究其根源是无解的，或者说当下无解。但计算机不同，它是人类一手发展起来的，它是有明确的原理和根源的，只要你将探究的目的限制于计算机体系而不是其物理原理，那么一切都是有解的。整个计算机体系基于相同的源头，已经形成了许多重要的支柱，所有的一切新的技术都在支柱之上伸展。大家面对汹涌的潮流，更应该做的是抓住支柱，从支柱出发学习，蔓延到感兴趣的一切目的地。<br>计算机网络就是其中一大支柱，这是一个及其繁荣的体系，涉及名词繁多。如果每次学习总是只看到一片树叶，而不知其全貌未免太过可惜。其实说来复杂，但计算机网络也就几十年的历史，不如我们跟随发展的脉络，分析发展中遇到了什么问题，使用了什么技术解决问题，导致了什么结果。顺着这样的思路，我们能看到整个计算机网络体系从发芽到开枝散叶，直到开出繁花。</p><ol><li><p>我们联合<br>让我们回到计算机网络的蛮荒时期，此时，我们面临的情况很简单：大学实验室里有几台新奇的玩意叫计算机，有同学希望能否将其中一台计算机的计算结果拿到另一台计算机中使用。要实现其实并不困难，如果是打孔计算机，那么只需要将计算结果打孔纸条，然后将纸条拿到另一台计算机读取即可。可是有同学嫌麻烦，他认为这样效率太低，还需要自己动手，于是他有了自己的想法：</p></li><li><p>计算机计算结果是电信号</p></li><li><p>另一台计算机使用的也是电信号</p></li><li><p>如果能直接连接两台计算机的电信号，那么就不需要使用纸条作为中间介质</p></li><li><p>使用电缆连接两台计算机的某个引脚</p></li><li><p>编写计算机程序，使源计算机将计算结果输出到指定引脚</p></li><li><p>编写计算机程序，使目的计算机读取指定引脚的输入</p></li><li><p>将上述控制电信号的硬件和软件封装起来，并给这个设备取个名字，就叫控制器</p></li><li><p>将控制器装到实验室的每台计算机上，每个计算机都可以将计算结果传给其他计算机，把这个行为就做通信，整个体系我们称为网络</p></li><li><p>最后随着时间发展，控制器逐渐有了更明确的名称：网络接口控制器，简称网卡<br>看！网络雏形出现了，后续网络体系发展的及其庞大，人们为了方便，将计算机分层，有7层的，也有5层的，不管怎样，上述体系一般都会分配到计算机网络体系的最底层，一般称为网络接口层。</p></li><li><p>你的名字<br>相信聪明的小伙伴们看出来了，上述描述中两台计算机直接通过电缆通信是很合理的，计算机直接将计算结果通过电信号传给另一台计算机。但是当实验室中所有的计算机都接入了电缆，电缆形成了网状结构后，计算结果就传给所有其他计算机了，但是我不想影响到其他同学们的计算机，只想把我的计算结果传递给最好的同学小明同学，那应该怎么办。没错，不知不觉中，我们已经了解到了“广播”的概念，广播这个概念出现是非常顺理成章的，网络通讯控制反而才是网络使用中出现的新问题。为了解决这个问题，人们很自然的给每个计算机取名字&#x2F;编号。这台计算机是A,那台计算机是小明同学的，那台叫他 beta 好了，还有那台又破又慢，就叫“垃圾”好了…不管怎样，计算机们第一次有了身份标识，用于在计算机网络中表明自身。此时，beta 的计算结果打算传给小明同学，那么它只需要在结果前面附上自己的代号以及目标的代号：beta|小明同学，然后电信号通过电缆广播出去，所有计算机都会收到消息，并核对是不是发给自己的，如果不是则丢弃，只有小明同学才需要去获取这条消息。<br>很多同学已经恍然大悟，这不就是MAC地址吗？是的，将计算机的代号规范化后固定为48位(6字节)，我们就得到了 MAC(Media Access Control) 地址，在实际应用中 MAC 地址是在网卡生产时写入到 ROM 里的。跟beta在计算结果前面添加“beta|小明同学”类似，在计算机网络中，每次通信都需要在消息前面添加 MAC 头部，格式为：<br>接收方 MAC 地址(48位)，发送方 MAC 地址(48位)，协议类型(16位)。<br>其中协议类型(16位)是用来告诉通信目标我这次传输的是什么类型的消息。用于标识上层协议的类型。<br>常见的协议类型数值包括：</p></li></ol><ul><li><p>0x0800：表示上层协议是 IPv4。</p></li><li><p>0x86DD：表示上层协议是 IPv6。</p></li><li><p>0x0806：表示上层协议是 ARP（地址解析协议）。</p></li><li><p>0x0808：表示上层协议是帧中继（Frame Relay）。</p></li><li><p>0x8100：表示上层协议是 VLAN 标记（Virtual LAN Tagging）</p></li></ul><ol start="3"><li>既生瑜何生亮<br>随着实验室计算机的增加，每次像发送消息给小明同学都要广播给所有计算机显得越来越愚蠢了。于是，你灵光一闪——集权，没错，你打算增加一个控制设备，所有的计算机都接入这台设备，它就是邮局，每台计算机发送消息就去邮局投递信件，说清楚你要将信件寄给小明同学，这样控制设备就直接将信件交给目标，不再打扰其他同学们干活了。这个设备不如就叫交换机吧。<br>但这样一来，交换机上肯定得清楚地知道实验室里面都有多少台计算机，每台计算机叫什么，不然它也没法将信件交给准备的目标。因此交换机上维护了一张清单，里面登记了所有计算机的 MAC 地址以及其对应的端口，每次收到信件，交换机就查询这张清单上对应 MAC 地址的端口，将信件发过去，我们把这张清单叫做 MAC 地址表，或者路由表。<br>问题再次得到了解决，直到隔壁某一天，你需要和隔壁学校合作，将你计算机的计算结果传给隔壁学校的计算机。<br>此时，方法可以很粗暴，直接拉一条电缆将对方计算机接入你实验室所在的网络，同时也在 MAC 地址表上添加记录。不久，小明同学也参加了项目，需要和对方另一台计算机通信，你发现不对劲了，不能每多一位同学就拉一条电缆，其他不说，就显得很蠢。<br>庆幸的是隔壁学校的同学们也很聪明，也使用了交换机控制通信。那么你们只需要将双方的交换机连接在一起，相互同步自身的 MAC 地址表，发现目标地址是隔壁学校的，就将信件交给对方的交换机，让对方代为转交。<br>问题得到了解决，很快，两个学校的合作事迹传遍全城，所有学校都急忙加入了进来，数量庞大的计算机都接入了网络，MAC 地址表越来越臃肿了。并且，很多学校并不愿意公开自己内部的计算机信息，地址表的信息开始失真，MAC 地址表的维护变成了新的问题。</li></ol><p>基于上述问题，一个天才般的方案诞生了。中心思想是分治，每个学校自己管理内部的计算机，学校之间通信则使用学校名+计算机名，其中计算机名由学校自己分配，这个方案就是大名鼎鼎的IP（Internet Protocol）协议。<br>其中学校名+计算机名推广为网络号+主机号，网络号负责标识 IP 地址属于哪个学校，主机号负责标识同一个学校下的计算机。 总长度定为了32位，分成了四段(比如192.168.1.1)。同时为了使得网络号长度可变，添加了子网掩码。例如子网掩码255.255.255.0，转为二进制是「11111111-11111111-11111111-00000000」，也就是说网络号的长度为24，主机号的长度为8，一个完整的 IP 地址表示为 192.168.1.1&#x2F;24，其中&#x2F;24表示子网掩码255.255.255.0。<br>只要将 IP 地址和子网掩码按位与运算就能得到网络号，将 IP 地址和子网掩码取反后进行按位与运算就能得到主机号。<br>回到学校问题上，不同学校使用不同的网络号，内部自由分配主机号。通信时，交换机发现目标 IP 地址是相同网络号的，就可以使用维护的 MAC 地址表，或者使用新的 IP 地址表将信件传递给目标。如果发现目标 IP 网络号对不上，那么就转发给网络号对应的另一个学校的交换机即可。对了，此时交换机需要提供寻址和路由功能，此时应该将其称为路由器会更加合适。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;MAC 和 IP 地址&lt;br&gt;当下计算机发展火热，每年不计其数的学生投奔这个行业，匆匆忙忙学一门编程语言，急急忙忙找一份工作。平时对于工作内容滚瓜烂熟，但是总感觉自己基础并不牢固，想要夯实基础，却又无从着手。平时碎片时间学到了很多，但知识点总是串不起来。这非常正常，计算机这</summary>
      
    
    
    
    
  </entry>
  
  <entry>
    <title>使用Windows11神器WSL打造独一无二的开发环境</title>
    <link href="https://blog.yuifly.top/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/"/>
    <id>https://blog.yuifly.top/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</id>
    <published>2024-02-07T16:00:00.000Z</published>
    <updated>2024-02-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="使用Windows11神器WSL打造独一无二的开发环境"><a href="#使用Windows11神器WSL打造独一无二的开发环境" class="headerlink" title="使用Windows11神器WSL打造独一无二的开发环境"></a>使用Windows11神器WSL打造独一无二的开发环境</h1><h2 id="2024年只推荐WSL2"><a href="#2024年只推荐WSL2" class="headerlink" title="2024年只推荐WSL2"></a>2024年只推荐WSL2</h2><p>相信每个开发人员都有自己一套开发习惯，有常用的开发工具，顺手的各种设定。而选择一个适合自己的操作系统，更是一切的基础。总体来说，可选的操作系统就三大类：Windows, MacOS, Linux，三个系统各有各的优缺点，在我看来Windows大而全，但稍显臃肿；MacOS优雅，兼具美观和高效，但价格昂贵且规矩繁多；Linux主打自由灵活，最接近生产环境，但是用户界面并不友好。</p><p>本人三个系统都使用过，在WSL出来之前实在难以抉择，但是2024年了，经过几年的使用，我强烈推荐基于WSL打造自己的开发环境，能兼顾Windows和Linux的优点。</p><p>WSL全称Windows Subsystem for Linux，是基于Windows Hyper-V平台的Linux虚拟机系统。Hyper-V是Windows自带的虚拟机平台，类似与大家可能更加熟悉的VMware，不过实话说，没VM好用，但胜在Windows自带且免费。所以说，本质上WSL就是虚拟机，不过是非常轻量的虚拟机，启动只需几秒。</p><p>WSL分为WSL1和WSL2：</p><ul><li><p>WSL1更加轻量，本质是转译，将Linux系统调用转为Windows系统调用，直接使用Windows本身的文件系统，所以数据操作性能很好。因为是转译的，所以存在Linux兼容性问题。</p></li><li><p>WSL2是完整的Linux虚拟机，和Windows本体（Host）隔离的更好，但也意味着和Host的互操作性较差。古早的版本想要操作Host的文件以及网络会面临诸多问题，不过经过这几年的更新，大部分问题都已经比较好地得到了解决。所以2024年更加推荐使用WSL2。</p></li></ul><h2 id="额外的功能"><a href="#额外的功能" class="headerlink" title="额外的功能"></a>额外的功能</h2><p>开启WSL需要同时开启Windows的Hyper-V虚拟机，基于Hyper-V还有两个好用的功能。</p><ul><li><p>Windows Sandbox: Windows自带沙盒软件，有什么风险操作例如未知的软件都可以放到里面执行，用完关掉，不留下任何痕迹。</p></li><li><p>WSA(Windows Subsystem for Android): Windows上运行安卓app。</p></li></ul><h2 id="效果展示"><a href="#效果展示" class="headerlink" title="效果展示"></a>效果展示</h2><img src="/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/7ba815a3-f056-4272-b3a2-95ae17063faa.png" class="" title="7ba815a3-f056-4272-b3a2-95ae17063faa"><p>如图所示，在Windows上开启WSL2后，我在此之上运行了诸多Linux系统。每个系统用于一种特定的功能，例如Java这个系统安装了Java开发用到的各种环境和软件，Python这个环境安装了CUDA环境。其实就是虚拟机的用法，但是因为WSL2非常轻量，用起来更像是在使用Docker。说起Docker在上面的Ubuntu和Python这两个系统中分别独立安装了Docker。所以整个开发环境分成了三层：</p><ul><li><p>Windows 11: 用于运行GUI软件，例如开发工具IDEA, VS Code，Navicat等。</p></li><li><p>WSL2: 用于编译、执行代码，提前配置好运行环境，也可用作测试环境。</p></li><li><p>Docker：跟WSL2作用类似，不过基于Docker丰富的生态，可以更方便的使用各类容器，包括Mysql, Redis等都能直接使用，虽说有性能问题，但是非常便于开发。</p></li></ul><p>此外，因为WSL2本质是虚拟机，可以非常容易地对整个系统进行备份和还原，所以不用担心因为各种骚操作搞崩自己的系统。重装系统后也可以迅速还原整个开发环境，再也不用担心哪些系统崩溃。</p><h2 id="打造过程"><a href="#打造过程" class="headerlink" title="打造过程"></a>打造过程</h2><h3 id="1-开启-WSL2"><a href="#1-开启-WSL2" class="headerlink" title="1. 开启 WSL2"></a>1. 开启 WSL2</h3><h4 id="1-1-开启-BIOS-的虚拟化"><a href="#1-1-开启-BIOS-的虚拟化" class="headerlink" title="1.1 开启 BIOS 的虚拟化"></a>1.1 开启 BIOS 的虚拟化</h4><p>确保 BIOS 中虚拟化选项开启。这个如果没有开启的话，需要进电脑的 BIOS 设置里开启，因为 intel 和 AMD 平台的不一样，具体可以搜索下。</p><h3 id="1-2-启用Windows功能"><a href="#1-2-启用Windows功能" class="headerlink" title="1.2 启用Windows功能"></a>1.2 启用Windows功能</h3><h5 id="1-2-1-命令行"><a href="#1-2-1-命令行" class="headerlink" title="1.2.1 命令行"></a>1.2.1 命令行</h5><p>以管理员方式打开 PowerShell 并运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:Microsoft-Windows-Subsystem-Linux &#x2F;all &#x2F;norestart</span><br><span class="line">dism.exe &#x2F;online &#x2F;enable-feature &#x2F;featurename:VirtualMachinePlatform &#x2F;all &#x2F;norestart</span><br></pre></td></tr></table></figure><p>执行完毕后重启生效。</p><h5 id="1-2-2-图形界面"><a href="#1-2-2-图形界面" class="headerlink" title="1.2.2 图形界面"></a>1.2.2 图形界面</h5><p>当然你也可以选择图形化界面操作。按下 Win+R 组合键，键入 optionalfeatures。</p><img src="/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/7ba815a3-f056-4272-b3a2-95ae17063faa-1707374502046.png" class="" title="7ba815a3-f056-4272-b3a2-95ae17063faa"><p>按下图勾选Windows虚拟机平台和Hyper-V以及Linux子系统。</p><img src="/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/67d8b68d-c02e-4695-b646-b192b5867186.png" class="" title="67d8b68d-c02e-4695-b646-b192b5867186"><p>点击OK后，Windows会自动下载，并提示你重启，重启后即再继续后续操作。</p><h3 id="2-安装Linux"><a href="#2-安装Linux" class="headerlink" title="2. 安装Linux"></a>2. 安装Linux</h3><h3 id="2-1-命令行"><a href="#2-1-命令行" class="headerlink" title="2.1 命令行"></a>2.1 命令行</h3><p>以管理员方式打开 PowerShell 并运行：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --install -d Ubuntu</span><br></pre></td></tr></table></figure><h4 id="2-2-微软商店"><a href="#2-2-微软商店" class="headerlink" title="2.2 微软商店"></a>2.2 微软商店</h4><p>打开微软商店，搜索Linux选择你喜欢的安装即可。</p><img src="/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/338d42cb-906b-4e70-bcb0-b5684c608059.png" class="" title="338d42cb-906b-4e70-bcb0-b5684c608059"><h3 id="3-配置Linux"><a href="#3-配置Linux" class="headerlink" title="3. 配置Linux"></a>3. 配置Linux</h3><p>推荐直接使用WSL2，以管理员方式打开 PowerShell 并运行将WSL默认版本设置为WSL2：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --set-default-version 2</span><br></pre></td></tr></table></figure><p>安装完后会在开始菜单中出现Ubuntu，直接点击打开即可，此时会让你输入用户名和密码。此时请注意，将你常用的Linux设定弄好，因为接下来，这个Linux系统将会作为其他后续所有Linux系统的模板，继承所有的设定。</p><h3 id="4-使用Linux镜像"><a href="#4-使用Linux镜像" class="headerlink" title="4. 使用Linux镜像"></a>4. 使用Linux镜像</h3><p>此时的Linux是安装在C盘的，如果后续继续安装其他系统，也都是继续安装在C盘，这是难以接受的。因此我们需要将已经安装的Linux导出，并卸载掉已经安装的这个Linux。</p><h4 id="4-1-导出Linux镜像"><a href="#4-1-导出Linux镜像" class="headerlink" title="4.1 导出Linux镜像"></a>4.1 导出Linux镜像</h4><p>以管理员方式打开 PowerShell 并运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wsl --export &lt;要导出的Linux名称&gt; &lt;导出的路径&gt;</span><br><span class="line">wsl --export Ubuntu E:\Hyper-V\Backup\ubuntu.tar</span><br></pre></td></tr></table></figure><p>等待一会，Linux就已经备份好了。</p><h4 id="4-2-删除已经安装的Ubuntu"><a href="#4-2-删除已经安装的Ubuntu" class="headerlink" title="4.2 删除已经安装的Ubuntu"></a>4.2 删除已经安装的Ubuntu</h4><p>直接当成普通APP删除即可。</p><h4 id="4-3-导入Linux镜像"><a href="#4-3-导入Linux镜像" class="headerlink" title="4.3 导入Linux镜像"></a>4.3 导入Linux镜像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># wsl --import &lt;要使用的Linux名称&gt; &lt;安装Linux到哪个路径&gt; &lt;要导入的镜像路径&gt; &lt;版本号(2：代表wsl2)&gt;</span><br><span class="line">wsl --import Java E:\Hyper-V\WSL\Java E:\Hyper-V\Backup\ubuntu.tar --version 2</span><br></pre></td></tr></table></figure><img src="/2024/02/08/%E4%BD%BF%E7%94%A8Windows11%E7%A5%9E%E5%99%A8WSL%E6%89%93%E9%80%A0%E7%8B%AC%E4%B8%80%E6%97%A0%E4%BA%8C%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/ea46d8b3-aa33-451c-8816-99ddda810d7b.png" class="" title="ea46d8b3-aa33-451c-8816-99ddda810d7b"><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="file:///E:/YUI/OneDrive/Pictures/Typedown/d7c056aa-7f9a-4d45-9665-15d2061a434b.png" alt="d7c056aa-7f9a-4d45-9665-15d2061a434b" title="">                </div>                <div class="image-caption">d7c056aa-7f9a-4d45-9665-15d2061a434b</div>            </figure><p>此时安装的路径下面将会看到多了一个ext4.vhdx文件，这就是你虚拟机文件，非常方便管理。</p><h4 id="4-4-导入多个Linux系统"><a href="#4-4-导入多个Linux系统" class="headerlink" title="4.4 导入多个Linux系统"></a>4.4 导入多个Linux系统</h4><p>使用同样的方法，导入名称为Python、NodeJS的多个镜像。然后安装好各自需要的软件，配置好环境。此时可以再次对这些镜像进行备份，以后就不再需要每次重复配置环境啦。</p><h4 id="4-5-使用第三方工具完成上面操作"><a href="#4-5-使用第三方工具完成上面操作" class="headerlink" title="4.5 使用第三方工具完成上面操作"></a>4.5 使用第三方工具完成上面操作</h4><p>虽然有第三方工具可以实现上述所有操作，但其实本质还是上述那些步骤，没有方便多少，按照上述步骤来更容易理解原理。当然如果确实觉得麻烦，推荐下面这个第三方开源工具使用:</p><p><a href="https://github.com/bostrot/wsl2-distro-manager" target="_blank" rel="noopener">GitHub - bostrot&#x2F;wsl2-distro-manager: A GUI to quickly manage your WSL2 instances</a></p><h3 id="5-安装Windows-Terminal"><a href="#5-安装Windows-Terminal" class="headerlink" title="5. 安装Windows Terminal"></a>5. 安装Windows Terminal</h3><p>推荐使用这个美观好用的终端，直接使用微软商店安装即可，安装完成后，会自动识别到当下存在哪些WSL系统。</p><h3 id="6-安装-Docker"><a href="#6-安装-Docker" class="headerlink" title="6. 安装 Docker"></a>6. 安装 Docker</h3><p>建议创建一个新的WSL系统，例如名字为Docker。其实Docker本来就有Windows版本，Docker Desktop on Windows。不过这个安装侵入性太强，影响当前的Windows系统，我更倾向于在WSL2中当成普通的Linux安装Docker。详细安装步骤直接去官网查看Ubuntu的安装步骤即可。</p><h3 id="7-使用-CUDA"><a href="#7-使用-CUDA" class="headerlink" title="7. 使用 CUDA"></a>7. 使用 CUDA</h3><p>WSL2 中也支持直接调用 Nvidia 的 GPU 使用 CUDA。</p><h4 id="7-1-前提"><a href="#7-1-前提" class="headerlink" title="7.1 前提"></a>7.1 前提</h4><ol><li><p>Pascal 及其后的 GPUs.</p></li><li><p>Windows 11 系统</p></li><li><p>安装了最新的 Nvidia CUDA 驱动</p></li></ol><h4 id="7-2-安装步骤"><a href="#7-2-安装步骤" class="headerlink" title="7.2 安装步骤"></a>7.2 安装步骤</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-key del 7fa2af80 # 移除旧KEY</span><br><span class="line">wget https:&#x2F;&#x2F;developer.download.nvidia.com&#x2F;compute&#x2F;cuda&#x2F;repos&#x2F;wsl-ubuntu&#x2F;x86_64&#x2F;cuda-keyring_1.1-1_all.deb</span><br><span class="line">sudo dpkg -i cuda-keyring_1.1-1_all.deb</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cuda-toolkit-12-3</span><br><span class="line"></span><br><span class="line">nvidia-smi # 验证安装是否生效</span><br></pre></td></tr></table></figure><h4 id="7-3-WSL2-的-Docker-中使用-CUDA"><a href="#7-3-WSL2-的-Docker-中使用-CUDA" class="headerlink" title="7.3 WSL2 的 Docker 中使用 CUDA"></a>7.3 WSL2 的 Docker 中使用 CUDA</h4><p>上面操作完成后，直接运行docker就行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run -it --gpus&#x3D;all --rm nvidia&#x2F;cuda:11.4.2-base-ubuntu20.04 nvidia-smi</span><br></pre></td></tr></table></figure><h3 id="8-通过配置文件让WSL2更好用"><a href="#8-通过配置文件让WSL2更好用" class="headerlink" title="8. 通过配置文件让WSL2更好用"></a>8. 通过配置文件让WSL2更好用</h3><p>WSL有两种配置文件，分别是主机上的配置文件和虚拟机的配置文件。但请注意，修改配置文件后需要完全关闭WSL8秒后才会生效。你可以通过命令关闭虚拟机:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">wsl --shutdown # 完全关闭WSL</span><br><span class="line">wsl --terminate &lt;虚拟机名称&gt; # 关闭特定虚拟机</span><br></pre></td></tr></table></figure><p>详情可以参阅官方文档:.</p><blockquote><p> Advanced settings configuration in WSL | Microsoft Learn](<a href="https://learn.microsoft.com/en-us/windows/wsl/wsl-config)[Advanced" target="_blank" rel="noopener">https://learn.microsoft.com/en-us/windows/wsl/wsl-config)[Advanced</a> settings configuration in WSL | Microsoft Learn](<a href="https://learn.microsoft.com/en-us/windows/wsl/wsl-config" target="_blank" rel="noopener">https://learn.microsoft.com/en-us/windows/wsl/wsl-config</a>)</p></blockquote><h4 id="8-1-主机配置文件-不推荐改动"><a href="#8-1-主机配置文件-不推荐改动" class="headerlink" title="8.1 主机配置文件(不推荐改动)"></a>8.1 主机配置文件(不推荐改动)</h4><p>你可以通过.wslconfig 文件更改WSL的全局选项，这个文件在用户文件夹的根目录下（即 <code>C:\Users\&lt;YourUserName&gt;\.wslconfig</code>）。</p><p>如果没有该文件，则新建一个，示例如下:<br>    [wsl2]<br>    # 自定义 Linux 内核的绝对路径<br>    kernel&#x3D;<path><br>    # 给 WSL 2 虚拟机分配的内存大小<br>    memory&#x3D;<size><br>    # 为 WSL 2 虚拟机分配的处理器核心数量<br>    processors&#x3D;<number><br>    # 为 WSL 2 虚拟机分配的交换空间，0 表示没有交换空间<br>    swap&#x3D;<size><br>    # 自定义交换虚拟磁盘 vhd 的绝对路径<br>    swapFile&#x3D;<path><br>    # 是否允许将 WSL 2 的端口转发到主机（默认为 true）<br>    localhostForwarding&#x3D;<bool><br>    # <code>&lt;path&gt;</code> 必须是带反斜杠的绝对路径，例如 <code>C:\\Users\\kernel</code><br>    # <code>&lt;size&gt;</code> 必须在后面加上单位，例如 8 GB 或 512 MB</p><p><em><strong>Win 11 23H2 史诗级更新</strong></em></p><p>WSL2 到 2.0 版本，带来了以下特性：</p><ol><li>支持自动回收内存</li><li>支持自动释放 WSL2 虚拟硬盘空间</li><li>支持和 Windows 使用相同的网络（镜像网络）</li><li>支持 DNS Tunneling</li><li>支持 Windows 设置的代理</li><li>支持 Windows 防火墙</li><li>支持 Multicast</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[experimental]</span><br><span class="line">autoMemoryReclaim&#x3D;gradual</span><br><span class="line">networkingMode&#x3D;mirrored</span><br><span class="line">dnsTunneling&#x3D;true</span><br><span class="line">firewall&#x3D;true</span><br><span class="line">autoProxy&#x3D;true</span><br><span class="line">sparseVhd&#x3D;true</span><br></pre></td></tr></table></figure><p>需要手动开启硬盘空间回收</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wsl --manage Ubuntu --set-sparse true</span><br></pre></td></tr></table></figure><p>另外，使用 <code>VSCode - WSL</code> 插件的，建议去 VSCode 设置里把自动端口转发关掉（<code>Remote: Auto Forward Ports</code>），避免冲突，因为 WSL2 更新之后新的网络已经是和你的 Windows 使用相同网络了，不再需要端口转发了。</p><p>最后，如果你在 WSL 里使用 docker，那需要将 <code>autoMemoryReclaim</code> 配置为 <code>dropcache</code> 或者 <code>disabled</code>，然后在 <code>/etc/docker/daemon.json</code> 里添加一句 <code>&quot;iptables&quot;: false</code> ，否则你可能无法正常使用 docker。</p><h4 id="8-2-虚拟机配置文件-推荐配置"><a href="#8-2-虚拟机配置文件-推荐配置" class="headerlink" title="8.2 虚拟机配置文件(推荐配置)"></a>8.2 虚拟机配置文件(推荐配置)</h4><p>可以登录虚拟机，通过&#x2F;etc&#x2F;wsl.conf更改WSL的虚拟机配置。如果没有该文件，则新建一个。</p><ol><li><p>开启systemd</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[boot]</span><br><span class="line">systemd&#x3D;true</span><br></pre></td></tr></table></figure></li><li><p>虚拟机中加载windows的文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[automount]</span><br><span class="line">enabled &#x3D; true</span><br><span class="line">root &#x3D; &#x2F;mnt&#x2F; # 要加载到哪个路径(例如C盘被加载到&#x2F;mnt&#x2F;c&#x2F;)</span><br><span class="line">options &#x3D; &quot;metadata,umask&#x3D;22,fmask&#x3D;11&quot; # 解决windows文件权限问题</span><br><span class="line">mountFsTab &#x3D; false</span><br></pre></td></tr></table></figure></li><li><p>虚拟机中关闭windows的环境变量PATH(容易影响环境变量问题)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[interop]</span><br><span class="line">enabled&#x3D;true</span><br><span class="line">appendWindowsPath&#x3D;false # 关闭PATH环境变量</span><br></pre></td></tr></table></figure></li><li><p>修改虚拟机默认用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[user]</span><br><span class="line">default&#x3D;xxx</span><br></pre></td></tr></table></figure><p>示例配置文件如下：</p></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[automount]</span><br><span class="line">enabled &#x3D; true</span><br><span class="line">root &#x3D; &#x2F;mnt&#x2F;</span><br><span class="line">options &#x3D; &quot;metadata,umask&#x3D;22,fmask&#x3D;11&quot;</span><br><span class="line">mountFsTab &#x3D; false</span><br><span class="line"></span><br><span class="line">[interop]</span><br><span class="line">enabled&#x3D;true</span><br><span class="line">appendWindowsPath&#x3D;false</span><br><span class="line"></span><br><span class="line">[user]</span><br><span class="line">default&#x3D;xxx</span><br></pre></td></tr></table></figure><h3 id="9-WSL-常见问题"><a href="#9-WSL-常见问题" class="headerlink" title="9. WSL 常见问题"></a>9. WSL 常见问题</h3><h4 id="9-1-某些低位端口无法使用"><a href="#9-1-某些低位端口无法使用" class="headerlink" title="9.1 某些低位端口无法使用"></a>9.1 某些低位端口无法使用</h4><blockquote><p>Hyper-V默认会占用掉低位端口，并且是随机使用的，很可能今天某个低位端口正常，突然有一天端口就无法使用了。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 系统默认的端口占用范围；</span><br><span class="line">❯ netsh int ipv4 show dynamicport tcp</span><br><span class="line"></span><br><span class="line">Protocol tcp Dynamic Port Range</span><br><span class="line">---------------------------------</span><br><span class="line">Start Port      : 1024</span><br><span class="line">Number of Ports : 64511</span><br><span class="line"></span><br><span class="line"># 开启hyper-v也会占用部分端口</span><br><span class="line">netsh interface ipv4 show excludedportrange protocol&#x3D;tcp</span><br></pre></td></tr></table></figure><h4 id="9-2-Proxifie-软件和-WSL2-的端口冲突"><a href="#9-2-Proxifie-软件和-WSL2-的端口冲突" class="headerlink" title="9.2 Proxifie 软件和 WSL2 的端口冲突"></a>9.2 Proxifie 软件和 WSL2 的端口冲突</h4><p>报错如下：</p><blockquote><p>Theattempted operation is not supported for the type of object referenced.</p><p>使用命令 netsh winsockrese重置修复</p></blockquote><h4 id="9-3-WSL2-中-VIM-复制到-Windows-的剪切板"><a href="#9-3-WSL2-中-VIM-复制到-Windows-的剪切板" class="headerlink" title="9.3 WSL2 中 VIM 复制到 Windows 的剪切板"></a>9.3 WSL2 中 VIM 复制到 Windows 的剪切板</h4><p>在 .vimrc 文件中添加以下内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot; WSL yank support</span><br><span class="line">let s:clip &#x3D; &#39;&#x2F;mnt&#x2F;c&#x2F;Windows&#x2F;System32&#x2F;clip.exe&#39;  &quot; change this path according to your mount point</span><br><span class="line">if executable(s:clip)</span><br><span class="line">    augroup WSLYank</span><br><span class="line">        autocmd!</span><br><span class="line">        autocmd TextYankPost * if v:event.operator &#x3D;&#x3D;# &#39;y&#39; | call system(s:clip, @0) | endif</span><br><span class="line">    augroup END</span><br><span class="line">endif</span><br></pre></td></tr></table></figure><h4 id="9-4-直接与宿主-Windows-系统通信"><a href="#9-4-直接与宿主-Windows-系统通信" class="headerlink" title="9.4 直接与宿主 Windows 系统通信"></a>9.4 直接与宿主 Windows 系统通信</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 直接放开 &#96;vEthernet (WSL)&#96; 这张网卡的防火墙</span><br><span class="line">New-NetFirewallRule -DisplayName &quot;WSL&quot; -Direction Inbound -InterfaceAlias &quot;vEthernet (WSL)&quot; -Action Allow</span><br></pre></td></tr></table></figure><h4 id="9-5-压缩磁盘占用"><a href="#9-5-压缩磁盘占用" class="headerlink" title="9.5 压缩磁盘占用"></a>9.5 压缩磁盘占用</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Optimize-VHD -Path E:\Hyper-V\WSL\Ubuntu\ext4.vhdx -Mode full</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;使用Windows11神器WSL打造独一无二的开发环境&quot;&gt;&lt;a href=&quot;#使用Windows11神器WSL打造独一无二的开发环境&quot; class=&quot;headerlink&quot; title=&quot;使用Windows11神器WSL打造独一无二的开发环境&quot;&gt;&lt;/a&gt;使用Win</summary>
      
    
    
    
    <category term="Developer" scheme="https://blog.yuifly.top/categories/Developer/"/>
    
    <category term="Tool" scheme="https://blog.yuifly.top/categories/Developer/Tool/"/>
    
    
    <category term="Dev Env" scheme="https://blog.yuifly.top/tags/Dev-Env/"/>
    
    <category term="WSL" scheme="https://blog.yuifly.top/tags/WSL/"/>
    
    <category term="Windows 11" scheme="https://blog.yuifly.top/tags/Windows-11/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://blog.yuifly.top/2024/01/04/hello-world/"/>
    <id>https://blog.yuifly.top/2024/01/04/hello-world/</id>
    <published>2024-01-04T06:55:22.533Z</published>
    <updated>2024-01-04T06:55:22.533Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.</summary>
      
    
    
    
    
  </entry>
  
</feed>
